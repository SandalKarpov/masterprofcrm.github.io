const express = require('express');
const db = require('./database');
const router = express.Router();

router.get('/', (req, res) => {
  const { start, end } = req.query;

  try {
    const stats = {};

    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫
    stats.totalOrders = db.prepare(`
      SELECT COUNT(*) as count FROM orders
      WHERE createdAt BETWEEN ? AND ?
    `).get(start, end).count;

    //–ó–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–û–ø–ª–∞—á–µ–Ω–æ"
    stats.paidOrders = db.prepare(`
        SELECT COUNT(*) as count FROM orders
        WHERE createdAt BETWEEN ? AND ?
        AND status='–û–ø–ª–∞—á–µ–Ω–æ' 
    `).get(start,end).count

    // –ó–∞—è–≤–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    stats.statuses = db.prepare(`
      SELECT status, COUNT(*) as count FROM orders
      WHERE createdAt BETWEEN ? AND ?
      GROUP BY status
    `).all(start, end);

    // üëâ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç { "–ì–æ—Ç–æ–≤–æ": 3, "–í —Ä–µ–º–æ–Ω—Ç–µ": 5, ... }
    stats.statusCounts = {};
    stats.statuses.forEach(row => {
      stats.statusCounts[row.status] = row.count;
    });

    // –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
    stats.newClients = db.prepare(`
      SELECT COUNT(DISTINCT clientPhone) as count FROM orders
      WHERE createdAt BETWEEN ? AND ?
    `).get(start, end).count;

    // –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å
    const days = (new Date(end) - new Date(start)) / (1000 * 3600 * 24) || 1;
    stats.avgPerDay = +(stats.totalOrders / days).toFixed(2);

    // –î–æ—Ö–æ–¥—ã –∏ —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫
    let totalRevenue = 0;
    let avgCheck = 0;

    try {
      const result = db.prepare(`
        SELECT COALESCE(SUM(price), 0) as sum 
        FROM orders
        WHERE createdAt BETWEEN ? AND ?
        AND status = '–û–ø–ª–∞—á–µ–Ω–æ' 
      `).get(start, end);

      totalRevenue = result.sum || 0;
      avgCheck = stats.totalOrders > 0 ? +(totalRevenue / stats.paidOrders).toFixed(2) : 0;
    } catch (e) {
      totalRevenue = 0;
      avgCheck = 0;
    }

    stats.totalRevenue = totalRevenue;
    stats.avgCheck = avgCheck;

    res.json(stats);
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', error: err.message });
  }
});

module.exports = router;
